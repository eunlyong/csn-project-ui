"use strict";angular.module("csnDashboardApp",["ngResource","ngRoute","ui.bootstrap"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html"}).when("/csn",{templateUrl:"views/csn.html",controller:"CSNController"}).when("/networks/status",{templateUrl:"views/network/status.html",controller:"NetworkStatusController"}).when("/networks/mgnt",{templateUrl:"views/network/management.html",controller:"NetworkMgntController"}).when("/topic",{templateUrl:"views/topic.html",controller:"TopicController"}).when("/search/network",{templateUrl:"views/search/network.html",controller:"NetworkSearchController"}).when("/search/data",{templateUrl:"views/search/data.html",controller:"DataSearchController"}).when("/virtual",{templateUrl:"views/5-virtual.html",controller:"VirtualController"}).when("/etc/about",{templateUrl:"views/etc/about.html"}).when("/etc/contact",{templateUrl:"views/etc/contact.html"}).when("/etc/help",{templateUrl:"views/etc/help.html"}).otherwise({redirectTo:"/"})}]),angular.module("csnDashboardApp").controller("CSNController",["$scope","$resource",function(a,b){a.persistStatus="Deactivated",a.meta={csnName:"-",adminName:"-",adminEmail:"-",persistOption:!1,creationTime:"-"},a.setCSNData=function(){var c=b("/csn-restapi/csn"),d={config:a.meta};c.save(d).$promise.then(function(b){a.meta=b.ret.data,console.log(b)})},a.getCSNData=function(){var c=b("/csn-restapi/csn");c.get().$promise.then(function(b){a.meta=b})["catch"](function(b){console.log(b),a.meta={csnName:"-",adminName:"-",adminEmail:"-",persistOption:!1,creationTime:"-"}})},a.removeCSNData=function(){var c=b("/csn-restapi/csn");c.remove().$promise.then(function(){a.meta={csnName:"-",adminName:"-",adminEmail:"-",persistOption:!1,creationTime:"-"}})["catch"](function(a){console.log(a)})},a.startCSN=function(){var c=b("/csn-restapi/csn?action=start");if("-"===a.meta.csnName)window.alert("Please Input Metadata");else if("Running"===a.status.working)window.alert("Already Running...");else{var d=a.meta;c.save(d).$promise.then(function(b){console.log(b),window.alert("Successfully Start the CSN!"),a.getCSNStatus(),a.getCSNData(),a.getBrokerStatus()})}},a.restartCSN=function(){var c=b("/csn-restapi/csn?action=restart");if("-"===a.meta.csnName)window.alert("CSN isn't running");else{var d={config:a.meta};c.save(d).$promise.then(function(b){console.log(b),window.alert("Successfully Retart the CSN!"),a.getCSNStatus(),a.getCSNData(),a.getBrokerStatus()})}},a.stopCSN=function(){var c=b("/csn-restapi/csn?action=stop");c.save().$promise.then(function(b){console.log(b),window.alert("Successfully Stop the CSN!"),a.getCSNStatus(),a.getCSNData(),a.getBrokerStatus()})},a.getCSNStatus=function(){var c=b("/csn-restapi/csn/status");c.get().$promise.then(function(b){a.status=b,a.status="OK"===a.status.working?{working:"Running",label:"primary"}:{working:"Stopped",label:"warning"}})["catch"](function(b){console.log(b),a.status={working:"Not Connected",label:"danger"}})},a.getBrokerStatus=function(){var c=b("/csn-restapi/csn/broker/status");c.get().$promise.then(function(b){a.broker=b})["catch"](function(b){console.log(b),a.broker={status:"-",proNum:"-",conNum:"-",inNum:"-",outNum:"-",storage:"-",mem:"-"}})}}]),angular.module("csnDashboardApp").controller("NetworkStatusController",["$scope","$resource","$http","$log",function(a,b,c,d){a.pageChanged=function(){d.log("Page changed to: "+a.currentPage)},a.getSensorNetworks=function(c){a.currentPage=c,a.itemsPerPage=4,a.pageIndex=(a.currentPage-1)*a.itemsPerPage;var d=b("/csn-restapi/csn/networks",{index:a.pageIndex,num:a.itemsPerPage});d.get().$promise.then(function(b){console.log(b),a.snData=b})["catch"](function(a){console.log(a)}),a.pageChanged()},a.getSensorNetworkCount=function(){c.get("/csn-restapi/csn/networks?select=counts").success(function(b){console.log(b),a.snCount=b,a.totalItems=a.snCount.operatingCNT})}}]),angular.module("csnDashboardApp").controller("NetworkMgntController",["$scope","$resource","$http","$modal","$log",function(a,b,c,d,e){a.newNetwork={members:[],metadata:[],tags:[]},a.setSensorNetworkMeta=function(){var c=b("/csn-restapi/csn/networks");c.save(a.newNetwork).$promise.then(function(a){console.log(a),window.alert("Succefully add SensorNetwork Metadata")})},a.addMetadata=function(){a.newNetwork.metadata.push({key:a.temp.metaKey,value:a.temp.metaValue}),console.log(a.newNetwork.metadata)},a.addTag=function(){a.newNetwork.tags.push(a.temp.tag),console.log(a.newNetwork.tags)},a.open=function(b){var c=d.open({templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",size:b});c.result.then(function(b){b.forEach(function(b){a.newNetwork.members.push(b)})},function(){e.info("Modal dismissed at: "+new Date)})},a.open2=function(b){var c=d.open({templateUrl:"myModalContent2.html",controller:"ModalInstanceCtrl2",size:b});c.result.then(function(b){b.forEach(function(b){a.newNetwork.members.push(b)})},function(){e.info("Modal dismissed at: "+new Date)})},a.deleteNetwork=function(a){var c=b("/csn-restapi/csn/networks/:snID",{snID:"@id"});c["delete"]({snID:a}).$promise.then(function(a){console.log(a),window.alert("Succefully Delete SensorNetwork Metadata")})},a.pageChanged=function(){e.log("Page changed to: "+a.currentPage)},a.getSensorNetworks=function(c){a.currentPage=c,a.itemsPerPage=4,a.pageIndex=(a.currentPage-1)*a.itemsPerPage;var d=b("/csn-restapi/csn/networks",{index:a.pageIndex,num:a.itemsPerPage});d.get().$promise.then(function(b){console.log(b),a.snData=b})["catch"](function(a){console.log(a)}),a.pageChanged()},a.getSensorNetworkCount=function(){c.get("/csn-restapi/csn/networks?select=counts").success(function(b){console.log(b),a.snCount=b,a.totalItems=a.snCount.operatingCNT})},a.getSensorNetworkMeta=function(){console.log("Checked");var c=b("/csn-restapi/csn/networks/:snID",{snID:"@id"});c.get({snID:a.findID}).$promise.then(function(b){console.log(b),a.meta=b,a.metaOK=!0})["catch"](function(b){console.log(b),a.metaOK=!1})},a.getSensorNetworkIDs=function(){c.get("/csn-restapi/csn/networks?select=ids").success(function(b){console.log(b),a.snIDs=b})},a.inputSnID=function(b){a.findID=b}}]),angular.module("csnDashboardApp").controller("ModalInstanceCtrl",["$scope","$resource","$modalInstance",function(a,b,c){a.search={tags:[],members:[]},a.temp={members:[]},a.ok=function(){a.search.members.forEach(function(b){a.temp.members.push(b)}),console.log(a.temp.members),c.close(a.temp.members)},a.cancel=function(){c.dismiss("cancel")},a.addSearchTerm=function(){a.search.tags.push(a.tempTag),console.log(a.search.tags)},a.searchNetworkWithTag=function(){var c=b("http://54.64.74.178:8080/csn-restapi/csn/search");c.save(a.search.tags).$promise.then(function(b){var c=b.searchResult;a.search.members=c,console.log(a.search.members)})}}]),angular.module("csnDashboardApp").controller("ModalInstanceCtrl2",["$scope","$resource","$modalInstance",function(a,b,c){a.temp={members:[]},a.ok=function(){c.close(a.temp.members)},a.cancel=function(){c.dismiss("cancel")},a.addTempMember=function(){a.temp.members.push(a.tempMember),console.log(a.temp.members)}}]),angular.module("csnDashboardApp").controller("TopicController",["$scope","$resource",function(a,b){a.getTopicStatus=function(){var c=b("/csn-restapi/csn/broker/topics");c.get().$promise.then(function(b){var c=b;a.topicList=c.data})["catch"](function(a){console.log(a)})},a.getBrokerStatus=function(){var c=b("/csn-restapi/csn/broker/status");c.get().$promise.then(function(b){a.broker=b})["catch"](function(b){console.log(b),a.broker={status:"-",proNum:"-",conNum:"-",inNum:"-",outNum:"-",storage:"-",mem:"-"}})}}]),angular.module("csnDashboardApp").controller("NetworkSearchController",["$scope","$resource","$http","$log",function(a,b,c,d){a.search={id:"-",tagSearchList:[]},a.getSensorNetworkCount=function(){c.get("/csn-restapi/csn/networks?select=counts").success(function(b){console.log(b),a.snCount=b,a.totalItems=a.snCount.operatingCNT})},a.getSensorNetworks=function(c){a.currentPage=c,a.itemsPerPage=4,a.pageIndex=(a.currentPage-1)*a.itemsPerPage;var d=b("/csn-restapi/csn/networks?select=ids",{index:a.pageIndex,num:a.itemsPerPage});d.get().$promise.then(function(b){var c=b;a.idList=c.ids})["catch"](function(a){console.log(a)}),a.pageChanged()},a.pageChanged=function(){d.log("Page changed to: "+a.currentPage)},a.addSearchTagTerm=function(b){a.search.tagSearchList.push(b),d.info("Added Search Tag: "+a.search.tagSearchList)},a.searchNetworkWithTag=function(){var c=b("http://54.64.74.178:8080/csn-restapi/csn/search");c.save(a.search.tagSearchList).$promise.then(function(b){var c=b.searchResult;a.search.idListUsingTag=c,d.info(a.search.idListUsingTag)})},a.setNetworkID=function(b){a.search.id=b},a.getNetworkInfo=function(){var c=b("/csn-restapi/csn/networks/:snID",{snID:"@id"});c.get({snID:a.search.id}).$promise.then(function(b){a.search.network=b,window.alert("Search SensorNetwork Metadata")})}}]),angular.module("csnDashboardApp").controller("DataSearchController",["$scope","$resource","$http","$log",function(a,b,c,d){a.search={id:"-",tagSearchList:[]},a.getSensorNetworkCount=function(){c.get("/csn-restapi/csn/networks?select=counts").success(function(b){console.log(b),a.snCount=b,a.totalItems=a.snCount.operatingCNT})},a.getSensorNetworks=function(c){a.currentPage=c,a.itemsPerPage=4,a.pageIndex=(a.currentPage-1)*a.itemsPerPage;var d=b("/csn-restapi/csn/networks?select=ids",{index:a.pageIndex,num:a.itemsPerPage});d.get().$promise.then(function(b){var c=b;a.idList=c.ids})["catch"](function(a){console.log(a)}),a.pageChanged()},a.pageChanged=function(){d.log("Page changed to: "+a.currentPage)},a.addSearchTagTerm=function(b){a.search.tagSearchList.push(b),d.info("Added Search Tag: "+a.search.tagSearchList)},a.searchNetworkWithTag=function(){var c=b("http://54.64.74.178:8080/csn-restapi/csn/search");c.save(a.search.tagSearchList).$promise.then(function(b){var c=b.searchResult;a.search.idListUsingTag=c,d.info(a.search.idListUsingTag)})},a.setNetworkID=function(b){a.search.id=b},a.getNetworkInfo=function(){var c=b("/csn-restapi/csn/networks/:snID",{snID:"@id"});c.get({snID:a.search.id}).$promise.then(function(b){a.search.network=b,window.alert("Search SensorNetwork Metadata")})}}]),angular.module("csnDashboardApp").controller("VirtualController",["$scope","$resource",function(a,b){a.getTopicStatus=function(){var c=b("/csn-restapi/csn/broker/topics");c.get().$promise.then(function(b){a.topics=b})["catch"](function(a){console.log(a)})}}]);